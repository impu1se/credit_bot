package main

import (
	"flag"
	"fmt"
	"log"
	"net/http"
	"os"
	"strconv"
	"sync"
	"time"

	tgbotapi "github.com/Syfaro/telegram-bot-api"
	"github.com/go-redis/redis"
)

var textMsg = map[string]string{
	"credit30": `
–ù–∏–∂–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω—ã –∫–æ–º–ø–∞–Ω–∏–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –ø–æ–¥ –≤–∞—à –∑–∞–ø—Ä–æ—Å.

–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∑–∞–π–º –¥–æ 30 —Ç—ã—Å. —Ä—É–±. –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–µ—Ä–µ–π—Ç–∏ –ø–æ –æ–¥–Ω–æ–π –∏–∑ —Å—Å—ã–ª–æ–∫ –Ω–∏–∂–µ –∏ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É –Ω–∞ —Å–∞–π—Ç–µ. (–í —Ç–µ—á–µ–Ω–∏–µ 5 –º–∏–Ω—É—Ç –¥–µ–Ω—å–≥–∏ –ø—Ä–∏–¥—É—Ç –≤–∞–º –Ω–∞ –∫–∞—Ä—Ç—É):

‚¨áÔ∏è–ö–æ–º–ø–∞–Ω–∏–∏ –≤ –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É:

–ï-–ö–∞–ø—É—Å—Ç–∞ - –ø–µ—Ä–≤—ã–π –∑–∞–π–º –¥–æ 30 000 —Ä—É–±. –±–µ–∑ –ø–µ—Ä–µ–ø–ª–∞—Ç—ã
‚û°Ô∏è https://bit.ly/2YEuzyi (–Ω–∞–∂–º–∏—Ç–µ –Ω–∞ —Å—Å—ã–ª–∫—É)

–†–æ–±–æ—Ç –ó–∞–π–º–µ—Ä - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–¥–æ–±—Ä–µ–Ω–∏–µ –¥–æ 30 000 —Ä—É–±
‚û°Ô∏è https://bit.ly/2JhC5dd (–Ω–∞–∂–º–∏—Ç–µ –Ω–∞ —Å—Å—ã–ª–∫—É)

Onzaem - –ø–µ—Ä–≤—ã–π –∑–∞–π–º –æ—Ç 2 000 –¥–æ 30 000 —Ä—É–±–ª–µ–π. –°—Ç–∞–≤–∫–∞ 1.5%
‚û°Ô∏è https://bit.ly/32eNRg4 (–Ω–∞–∂–º–∏—Ç–µ –Ω–∞ —Å—Å—ã–ª–∫—É)

–î–µ–Ω—å–≥–∏ –°—Ä–∞–∑—É - –ø–µ—Ä–≤—ã–π –∑–∞–π–º –¥–æ 30 000 —Ä—É–±. –±–µ–∑ –ø–µ—Ä–µ–ø–ª–∞—Ç—ã
‚û°Ô∏è https://bit.ly/2XSvoGF (–Ω–∞–∂–º–∏—Ç–µ –Ω–∞ —Å—Å—ã–ª–∫—É)

Moneza - –ø–µ—Ä–≤—ã–π –∑–∞–π–º –¥–æ 30 000 —Ä—É–±. –±–µ–∑ –ø–µ—Ä–µ–ø–ª–∞—Ç—ã
‚û°Ô∏è https://bit.ly/2XtEHZp (–Ω–∞–∂–º–∏—Ç–µ –Ω–∞ —Å—Å—ã–ª–∫—É)

–°–æ–≤–µ—Ç: –ß—Ç–æ–±—ã —É–≤–µ–ª–∏—á–∏—Ç—å –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –∏ —Å–∫–æ—Ä–æ—Å—Ç—å –æ–¥–æ–±—Ä–µ–Ω–∏—è –∑–∞–π–º–∞, –æ—Å—Ç–∞–≤—å—Ç–µ –∞–Ω–∫–µ—Ç—ã —Å—Ä–∞–∑—É –≤ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∫–æ–º–ø–∞–Ω–∏—è—Ö!
`,
	"credit15": `
–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∑–∞–π–º –¥–æ 15 —Ç—ã—Å. —Ä—É–±. –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–µ—Ä–µ–π—Ç–∏ –ø–æ –æ–¥–Ω–æ–π –∏–∑ —Å—Å—ã–ª–æ–∫ –Ω–∏–∂–µ –∏ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É –Ω–∞ —Å–∞–π—Ç–µ. (–í —Ç–µ—á–µ–Ω–∏–µ 5 –º–∏–Ω—É—Ç –¥–µ–Ω—å–≥–∏ –ø—Ä–∏–¥—É—Ç –≤–∞–º –Ω–∞ –∫–∞—Ä—Ç—É):

‚¨áÔ∏è–ö–æ–º–ø–∞–Ω–∏–∏ –≤ –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É:

Kredito24 - –ø–µ—Ä–≤—ã–π –∑–∞–π–º –¥–æ 15 000 —Ä—É–±. –°—Ç–∞–≤–∫–∞ 1,5%
‚û°Ô∏è https://bit.ly/2LKfnMJ (–Ω–∞–∂–º–∏—Ç–µ –Ω–∞ —Å—Å—ã–ª–∫—É)

E-zaem - –ø–µ—Ä–≤—ã–π –∑–∞–π–º –¥–æ 15 000 —Ä—É–±. –±–µ–∑ –ø–µ—Ä–µ–ø–ª–∞—Ç
‚û°Ô∏è https://bit.ly/2YAhdTD (–Ω–∞–∂–º–∏—Ç–µ –Ω–∞ —Å—Å—ã–ª–∫—É)

Metrokredit - –ø–µ—Ä–≤—ã–π –∑–∞–π–º –¥–æ 15 000 —Ä—É–±–ª–µ–π. –±–µ–∑ –ø–µ—Ä–µ–ø–ª–∞—Ç
‚û°Ô∏è https://bit.ly/30nAkB7 (–Ω–∞–∂–º–∏—Ç–µ –Ω–∞ —Å—Å—ã–ª–∫—É)

SmartCredit - –ø–µ—Ä–≤—ã–π –∑–∞–π–º –¥–æ 15 000 —Ä—É–±. 
–ó–∞–ø—É—Å—Ç–∏–ª–∏ –ø—Ä–æ–≥—Ä–∞–º–º—É –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏ - —Å—Ç–∞–≤–∫–∞ 0.95%
‚û°Ô∏è https://bit.ly/2JfDW2a (–Ω–∞–∂–º–∏—Ç–µ –Ω–∞ —Å—Å—ã–ª–∫—É)

CreditPlus - –ø–µ—Ä–≤—ã–π –∑–∞–π–º –¥–æ 15 000 —Ä—É–±. –±–µ–∑ –ø–µ—Ä–µ–ø–ª–∞—Ç—ã
‚û°Ô∏è https://bit.ly/2Xx1atp (–Ω–∞–∂–º–∏—Ç–µ –Ω–∞ —Å—Å—ã–ª–∫—É)

–°–æ–≤–µ—Ç: –ß—Ç–æ–±—ã —É–≤–µ–ª–∏—á–∏—Ç—å –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –∏ —Å–∫–æ—Ä–æ—Å—Ç—å –æ–¥–æ–±—Ä–µ–Ω–∏—è –∑–∞–π–º–∞, –æ—Å—Ç–∞–≤—å—Ç–µ –∞–Ω–∫–µ—Ç—ã —Å—Ä–∞–∑—É –≤ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∫–æ–º–ø–∞–Ω–∏—è—Ö!`,

	"credit50": `
–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∑–∞–π–º –¥–æ 50 —Ç—ã—Å. —Ä—É–±. –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–µ—Ä–µ–π—Ç–∏ –ø–æ –æ–¥–Ω–æ–π –∏–∑ —Å—Å—ã–ª–æ–∫ –Ω–∏–∂–µ –∏ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É –Ω–∞ —Å–∞–π—Ç–µ. (–í —Ç–µ—á–µ–Ω–∏–µ 5 –º–∏–Ω—É—Ç –¥–µ–Ω—å–≥–∏ –ø—Ä–∏–¥—É—Ç –≤–∞–º –Ω–∞ –∫–∞—Ä—Ç—É):

‚¨áÔ∏è–ö–æ–º–ø–∞–Ω–∏–∏ –≤ –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É:

–¢—É—Ä–±–æ–∑–∞–π–º - –ø–µ—Ä–≤—ã–π –∑–∞–π–º –æ—Ç 10 000 –¥–æ 50 000. –°—Ç–∞–≤–∫–∞ 0,8%
 ‚û°Ô∏è https://bit.ly/2S5aVt2 (–Ω–∞–∂–º–∏—Ç–µ –Ω–∞ —Å—Å—ã–ª–∫—É)

GreenMoney- –ø–µ—Ä–≤—ã–π –∑–∞–π–º –¥–æ 40 000 —Ä—É–±. –°—Ç–∞–≤–∫–∞ 0,95%
‚û°Ô∏è https://bit.ly/2RWrLKs (–Ω–∞–∂–º–∏—Ç–µ –Ω–∞ —Å—Å—ã–ª–∫—É)

–ë—ã—Å—Ç—Ä–æ–¥–µ–Ω—å–≥–∏ - –ø–µ—Ä–≤—ã–π –∑–∞–π–º –¥–æ 50 000 —Ä—É–±–ª–µ–π. 
‚û°Ô∏è https://bit.ly/2Xw5QQ8 (–Ω–∞–∂–º–∏—Ç–µ –Ω–∞ —Å—Å—ã–ª–∫—É)

–°–æ–≤–µ—Ç: –ß—Ç–æ–±—ã —É–≤–µ–ª–∏—á–∏—Ç—å –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –∏ —Å–∫–æ—Ä–æ—Å—Ç—å –æ–¥–æ–±—Ä–µ–Ω–∏—è –∑–∞–π–º–∞, –æ—Å—Ç–∞–≤—å—Ç–µ –∞–Ω–∫–µ—Ç—ã —Å—Ä–∞–∑—É –≤ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∫–æ–º–ø–∞–Ω–∏—è—Ö!`,
	"welcome": `
–ë–æ—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏—á–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Å –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–º–∏ –∫–æ–º–ø–∞–Ω–∏—è–º–∏!

–ü–µ—Ä–µ–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤ –æ—Å—É—â–µ—Å—Ç–≤–ª—è–µ—Ç—Å—è –ª—é–±—ã–º —É–¥–æ–±–Ω—ã–º –¥–ª—è –≤–∞—Å —Å–ø–æ—Å–æ–±–æ–º.

P.S. –ú—ã –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–Ω—ã –≤ —Ç–æ–º, —á—Ç–æ–±—ã –≤—ã –ø–æ–ª—É—á–∏–ª–∏ –∑–∞–π–º! –í–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ —Å–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º –∏ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –ø–µ—Ä–µ–≤–æ–¥ –Ω—É–∂–Ω–æ–π –≤–∞–º —Å—É–º–º—ã —É–∂–µ —á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç –ø–æ—Å–ª–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞—è–≤–∫–∏!
–ö–∞–∫–∞—è —Å—É–º–º–∞ –≤–∞–º –Ω—É–∂–Ω–∞?

‚¨áÔ∏è‚¨áÔ∏è‚¨áÔ∏è`,

	"afterStart": `
–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, %v!
–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–≤ –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –∑–∞–π–º —É –Ω–∞—à–µ–≥–æ –ø–∞—Ä—Ç–Ω–µ—Ä–∞ –ï - –∫–∞–ø—É—Å—Ç–∞.
–î–ª—è –º–æ–º–µ–Ω—Ç–∞–ª—å–Ω–æ–≥–æ, –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ 30.000 ‚ÇΩ –ø–æ–¥ 0 %% (—Å–∫–æ–ª—å–∫–æ –≤–∑—è–ª–∏ —Å—Ç–æ–ª—å–∫–æ –∏ –æ—Ç–¥–∞–µ—Ç–µ) –¥–æ 30 –¥–Ω–µ–π –æ—Å—Ç–∞–≤—å—Ç–µ –∑–∞—è–≤–∫—É –∑–¥–µ—Å—å: https://bit.ly/2YEuzyi (–Ω–∞–∂–º–∏—Ç–µ –Ω–∞ —Å—Å—ã–ª–∫—É)

üí¨ –ò–ª–∏ –Ω–∞—á–Ω–∏—Ç–µ –ø–æ–¥–±–æ—Ä –¥—Ä—É–≥–∏—Ö –∑–∞–π–º–æ–≤.`,
	"timerText": `
üí≥‚Å£ –ó–ê–ô–ú –ë–ï–ó –ü–†–û–¶–ï–ù–¢–û–í üì¢
–î–∞-–¥–∞, —Å–∫–æ–ª—å–∫–æ –≤–∑—è–ª–∏, —Å—Ç–æ–ª—å–∫–æ –æ—Ç–¥–∞–ª–∏. –ü—Ä–æ—Ü–µ–Ω—Ç–æ–≤ - –ù–ï–¢‚ùóÔ∏è

üìå –®–∞–Ω—Å –æ–¥–æ–±—Ä–µ–Ω–∏—è 98% 
üìå –ù–µ—Ç—É –ø—Ä–æ—Ü–µ–Ω—Ç–∞ –ø–æ –ø–µ—Ä–µ–ø–ª–∞—Ç–∞–º
üìå –°–∞–º—ã–µ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –Ω–∞ —Ä—ã–Ω–∫–µ

–û—Ñ–æ—Ä–º–∏—Ç–µ –∑–∞—è–≤–∫—É –∑–∞ 1 –º–∏–Ω—É—Ç—É –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å üëá

E-zaem - –ø–µ—Ä–≤—ã–π –∑–∞–π–º –¥–æ 15 000 —Ä—É–±. –±–µ–∑ –ø–µ—Ä–µ–ø–ª–∞—Ç
‚û°Ô∏è https://bit.ly/2YAhdTD (–Ω–∞–∂–º–∏—Ç–µ –Ω–∞ —Å—Å—ã–ª–∫—É)

–ï-–ö–∞–ø—É—Å—Ç–∞ - –ø–µ—Ä–≤—ã–π –∑–∞–π–º –¥–æ 30 000 —Ä—É–±. –±–µ–∑ –ø–µ—Ä–µ–ø–ª–∞—Ç—ã
‚û°Ô∏è https://bit.ly/2YEuzyi (–Ω–∞–∂–º–∏—Ç–µ –Ω–∞ —Å—Å—ã–ª–∫—É)

CreditPlus - –ø–µ—Ä–≤—ã–π –∑–∞–π–º –¥–æ 15 000 —Ä—É–±. –±–µ–∑ –ø–µ—Ä–µ–ø–ª–∞—Ç—ã
‚û°Ô∏è https://bit.ly/2Xx1atp (–Ω–∞–∂–º–∏—Ç–µ –Ω–∞ —Å—Å—ã–ª–∫—É)
`,
}

const (
	layout = "2006-01-02T15:04:05"
)

func NewClient(addr string, db int) (*redis.Client, error) {
	client := redis.NewClient(&redis.Options{
		Addr:     addr,
		Password: "", // no password set
		DB:       db, // use default DB
	})

	if _, err := client.Ping().Result(); err != nil {
		return nil, err
	}
	return client, nil
}

var firstBtn = tgbotapi.NewReplyKeyboard(
	tgbotapi.NewKeyboardButtonRow(
		tgbotapi.NewKeyboardButton("–ü–æ–ª—É—á–∏—Ç—å –∑–∞–π–º üí∏"),
	),
)
var secondBtn = tgbotapi.NewReplyKeyboard(
	tgbotapi.NewKeyboardButtonRow(
		tgbotapi.NewKeyboardButton("–î–æ 15.000—Ä üí∞"),
	),
	tgbotapi.NewKeyboardButtonRow(
		tgbotapi.NewKeyboardButton("–î–æ 30.000—Ä üí∞"),
	),
	tgbotapi.NewKeyboardButtonRow(
		tgbotapi.NewKeyboardButton("–î–æ 50.000—Ä üí∞"),
	),
)

type Config struct {
	ApiToken string
	Port     string
	Address  string
	Debug    bool
	Tls      bool
}

func newConfig() *Config {

	var apiToken, port, addr string

	flag.StringVar(&apiToken, "token", "", "Telegram Bot Token")
	flag.StringVar(&port, "port", "80", "Port for server")
	flag.StringVar(&addr, "addr", "localhost", "Address for server")
	debug := flag.Bool("debug", false, "Debug true/false")
	tls := flag.Bool("tls", false, "TLS true/false")
	flag.Parse()

	if apiToken == "" {
		log.Print("-token is required")
		os.Exit(1)
	}

	return &Config{
		ApiToken: apiToken,
		Port:     port,
		Address:  addr,
		Debug:    *debug,
		Tls:      *tls,
	}
}

func main() {

	var mutex = &sync.Mutex{}

	client, err := NewClient("localhost:6379", 0)
	if err != nil {
		log.Fatal("not init redis client")
	}
	for typeText, text := range textMsg {
		err := setValue(client, typeText, text)
		if err != nil {
			log.Fatal(err)
		}
	}

	value, err := getValue(client, "counter")
	if value == "" {
		value = "0"
	}
	if err := setValue(client, "counter", value); err != nil {
		log.Fatal("can't set counter")
	}

	config := newConfig()

	fmt.Println("Running bot...")
	bot, err := tgbotapi.NewBotAPI(config.ApiToken)
	if err != nil {
		log.Panic(err)
	}

	bot.Debug = config.Debug
	log.Printf("Authorized on account %s", bot.Self.UserName)
	if config.Tls {
		_, err = bot.SetWebhook(tgbotapi.NewWebhookWithCert(config.Address+"/"+config.ApiToken, os.Getenv("CREDIT_CERT")))
		if err != nil {
			log.Fatal(err)
		}
	} else {
		_, err = bot.SetWebhook(tgbotapi.NewWebhook(config.Address + "/" + config.ApiToken))
		if err != nil {
			log.Fatal(err)
		}
	}
	info, err := bot.GetWebhookInfo()
	if err != nil {
		log.Fatal(err)
	}
	if info.LastErrorDate != 0 {
		log.Printf("Telegram callback failed: %s", info.LastErrorMessage)
	}

	ticker := time.NewTicker(10 * time.Minute)

	updates := bot.ListenForWebhook("/" + bot.Token)
	if config.Tls {
		go http.ListenAndServeTLS(":"+config.Port, os.Getenv("CREDIT_CERT"), os.Getenv("CREDIT_KEY"), nil)
	} else {
		go http.ListenAndServe(":"+config.Port, nil)
	}

	fmt.Printf("Start server on %v:%v ", config.Address, config.Port)
	for {
		select {
		case update := <-updates:
			if update.Message == nil {
				return
			}
			chatID := update.Message.Chat.ID
			if update.Message.IsCommand() {
				switch update.Message.Command() {
				case "start":
					client.LPush("chatIds", chatID)
					mutex.Lock()
					counter, err := getValue(client, "counter")
					if err != nil {
						log.Fatal(err)
					}
					count, err := strconv.Atoi(counter)
					if err != nil {
						log.Fatal(err)
					}
					err = setValue(client, "counter", count+1)
					if err != nil {
						log.Fatal(err)
					}
					mutex.Unlock()
					updateTime := time.Now()

					if err := setValue(client, fmt.Sprintf("%v", chatID), updateTime.Format(layout)); err != nil {
						log.Fatal(err)
					}
					afterStart, _ := getValue(client, "afterStart")
					msg := tgbotapi.NewMessage(chatID, fmt.Sprintf(afterStart, update.Message.Chat.UserName))
					msg.ReplyMarkup = firstBtn
					if _, err := bot.Send(msg); err != nil {
						log.Fatal(err)
					}
				case "stat":
					counter, _ := getValue(client, "counter")
					msg := tgbotapi.NewMessage(chatID, counter)
					if _, err := bot.Send(msg); err != nil {
						log.Fatal(err)
					}
				}
			}
			if update.Message.Text != "" {
				handlingText(update.Message.Text, chatID, bot, client)
			}
		case _ = <-ticker.C:
			wakeUp(bot, client)

		}
	}
}

func getValue(client *redis.Client, key string) (string, error) {
	val, err := client.Get(key).Result()
	if err == redis.Nil {
		return "", nil
	} else if err != nil {
		return "", err
	}

	return val, nil
}

func setValue(client *redis.Client, key string, value interface{}) error {
	err := client.Set(key, value, 0).Err()
	if err != nil {
		return err
	}
	return nil
}

func handlingText(text string, chatID int64, bot *tgbotapi.BotAPI, client *redis.Client) {
	switch text {
	case "–ü–æ–ª—É—á–∏—Ç—å –∑–∞–π–º üí∏":
		welcome, err := getValue(client, "welcome")
		if err != nil {
			log.Fatal("Not get value from welcome key")
		}
		msg := tgbotapi.NewMessage(chatID, welcome)
		msg.ReplyMarkup = secondBtn
		if _, err := bot.Send(msg); err != nil {
			log.Fatal(err)
		}

		err = updateTime(client, fmt.Sprintf("%v", chatID), getTime(client, chatID), 0)
		if err != nil {
			log.Fatal(err)
		}

	case "–î–æ 15.000—Ä üí∞":
		credit15, err := getValue(client, "credit15")
		if err != nil {
			log.Fatal("Not get value from credit15 key")
		}
		msg := tgbotapi.NewMessage(chatID, credit15)
		msg.ReplyMarkup = firstBtn
		if _, err := bot.Send(msg); err != nil {
			log.Fatal(err)
		}
		err = updateTime(client, fmt.Sprintf("%v", chatID), getTime(client, chatID), 0)
		if err != nil {
			log.Fatal(err)
		}

	case "–î–æ 30.000—Ä üí∞":
		credit30, err := getValue(client, "credit30")
		if err != nil {
			log.Fatal("Not get value from credit30 key")
		}
		msg := tgbotapi.NewMessage(chatID, credit30)
		msg.ReplyMarkup = firstBtn
		if _, err := bot.Send(msg); err != nil {
			log.Fatal(err)
		}
		err = updateTime(client, fmt.Sprintf("%v", chatID), getTime(client, chatID), 0)
		if err != nil {
			log.Fatal(err)
		}

	case "–î–æ 50.000—Ä üí∞":
		credit50, err := getValue(client, "credit50")
		if err != nil {
			log.Fatal("Not get value from credit50 key")
		}
		msg := tgbotapi.NewMessage(chatID, credit50)
		msg.ReplyMarkup = firstBtn
		if _, err := bot.Send(msg); err != nil {
			log.Fatal(err)
		}
		err = updateTime(client, fmt.Sprintf("%v", chatID), getTime(client, chatID), 0)
		if err != nil {
			log.Fatal(err)
		}
	}
}

func getTime(client *redis.Client, chatID int64) time.Time {
	strChatID := strconv.Itoa(int(chatID))
	lastActive, err := getValue(client, strChatID)
	if err != nil {
		log.Fatal(err)
	}
	t, err := time.Parse(layout, lastActive)
	if err != nil {
		log.Printf("can't parse time")
		t = time.Now()
	}
	return t
}

func wakeUp(bot *tgbotapi.BotAPI, client *redis.Client) {
	chatIds, err := client.LRange("chatIds", 0, -1).Result()
	if err != nil {
		log.Fatal(err)
	}
	for _, chatId := range chatIds {
		lastTime, err := getValue(client, chatId)
		if err != nil {
			log.Fatal(err)
		}
		timeNow := time.Now()
		t, err := time.Parse(layout, lastTime)
		if err != nil {
			log.Fatal(err)
		}

		diff := timeNow.Sub(t)
		if diff > time.Duration(4*time.Hour) {
			timerText, err := getValue(client, "timerText")
			if err != nil {
				log.Fatalf("not get value from timer text key with err %v", err)
			}
			intChatId, err := strconv.Atoi(chatId)
			if err != nil {
				log.Fatal(err)
			}
			msg := tgbotapi.NewMessage(int64(intChatId), timerText)
			if _, err := bot.Send(msg); err != nil {
				client.LRem("chatIds", 0, chatId)
			}
			if err := updateTime(client, chatId, timeNow, 24); err != nil {
				log.Fatal(err)
			}
		}
	}
}

func updateTime(client *redis.Client, chatId string, lastTime time.Time, hour int) error {
	var newTime = time.Now().Format(layout)
	if hour != 0 {
		newTime = lastTime.Add(time.Duration(hour) * time.Hour).Format(layout)
	}
	err := setValue(client, chatId, newTime)
	if err != nil {
		log.Fatal(err)
	}
	fmt.Printf("update chatid %v from %v time to new %v time", chatId, lastTime, newTime)
	return nil
}
